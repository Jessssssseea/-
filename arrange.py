from ortools.sat.python import cp_model

# 输入数据
班级 = [1, 2]  # 班级编号
天 = [1, 2, 3, 4, 5]  # 周一到周五
时间段 = [1, 2, 3, 4, 5, 6, 7, 8]  # 每天8节课
科目 = ["语文", "数学", "外语", "物理", "化学", "生物学", "历史", "思想政治", "地理", "音乐或心理", "体育", "信息技术", "通用技术"]
疲劳值 = {
    "语文": 5,
    "数学": 8,
    "外语": 6,
    "物理": 7,
    "化学": 5,
    "生物学": 6,
    "历史": 5,
    "思想政治": 3,
    "地理": 4,
    "音乐或心理": 3,
    "体育": 9,
    "信息技术": 4,
    "通用技术": 3
}
每周课时数 = {
    "语文": 6,
    "数学": 7,
    "外语": 6,
    "物理": 4,
    "化学": 4,
    "生物学": 3,
    "历史": 2,
    "思想政治": 1,
    "地理": 1,
    "音乐或心理": 1,
    "体育": 2,
    "信息技术": 1,
    "通用技术": 1
}

# 疲劳值增长比例
疲劳值增长 = {
    ("语文", "语文"): 0.25, ("数学", "数学"): 0.4, ("外语", "外语"): 0.25, 

    ("语文", "数学"): 0.2, ("数学", "语文"): 0.2,
    ("语文", "外语"): 0.25, ("外语", "语文"): 0.25,
    ("语文", "物理"): 0.2, ("物理", "语文"): 0.2,
    ("语文", "化学"): 0.2, ("化学", "语文"): 0.25,
    ("语文", "生物学"): 0.2, ("生物学", "语文"): 0.2,
    ("语文", "历史"): 0.25, ("历史", "语文"): 0.3,
    ("语文", "思想政治"): 0.25, ("思想政治", "语文"): 0.25,
    ("语文", "地理"): 0.25, ("地理", "语文"): 0.25,
    ("语文", "音乐或心理"): 0.1, ("音乐或心理", "语文"): 0.15,
    ("语文", "体育"): 0.15, ("体育", "语文"): 0.25,
    ("语文", "信息技术"): 0.15, ("信息技术", "语文"): 0.15,
    ("语文", "通用技术"): 0.1, ("通用技术", "语文"): 0.15,

    ("数学", "外语"): 0.2, ("外语", "数学"): 0.2,
    ("数学", "物理"): 0.35, ("物理", "数学"): 0.35,
    ("数学", "化学"): 0.35, ("化学", "数学"): 0.25,
    ("数学", "生物学"): 0.35, ("生物学", "数学"): 0.3,
    ("数学", "历史"): 0.25, ("历史", "数学"): 0.25,
    ("数学", "思想政治"): 0.25, ("思想政治", "数学"): 0.2,
    ("数学", "地理"): 0.25, ("地理", "数学"): 0.2,
    ("数学", "音乐或心理"): 0.15, ("音乐或心理", "数学"): 0.15,
    ("数学", "体育"): 0.2, ("体育", "数学"): 0.5,
    ("数学", "信息技术"): 0.2, ("信息技术", "数学"): 0.15,
    ("数学", "通用技术"): 0.2, ("通用技术", "数学"): 0.15,

    ("外语", "物理"): 0.2, ("物理", "外语"): 0.2,
    ("外语", "化学"): 0.2, ("化学", "外语"): 0.25,
    ("外语", "生物学"): 0.2, ("生物学", "外语"): 0.2,
    ("外语", "历史"): 0.25, ("历史", "外语"): 0.3,
    ("外语", "思想政治"): 0.25, ("思想政治", "外语"): 0.25,
    ("外语", "地理"): 0.25, ("地理", "外语"): 0.25,
    ("外语", "音乐或心理"): 0.15, ("音乐或心理", "外语"): 0.15,
    ("外语", "体育"): 0.15, ("体育", "外语"): 0.25,
    ("外语", "信息技术"): 0.15, ("信息技术", "外语"): 0.15,
    ("外语", "通用技术"): 0.15, ("通用技术", "外语"): 0.15,

    ("物理", "化学"): 0.3, ("化学", "物理"): 0.35,
    ("物理", "生物学"): 0.3, ("生物学", "物理"): 0.3,
    ("物理", "历史"): 0.2, ("历史", "物理"): 0.25,
    ("物理", "思想政治"): 0.2, ("思想政治", "物理"): 0.2,
    ("物理", "地理"): 0.2, ("地理", "物理"): 0.2,
    ("物理", "音乐或心理"): 0.15, ("音乐或心理", "物理"): 0.15,
    ("物理", "体育"): 0.15, ("体育", "物理"): 0.4,
    ("物理", "信息技术"): 0.15, ("信息技术", "物理"): 0.15,
    ("物理", "通用技术"): 0.15, ("通用技术", "物理"): 0.15,

    ("化学", "生物学"): 0.3, ("生物学", "化学"): 0.25,
    ("化学", "历史"): 0.2, ("历史", "化学"): 0.25,
    ("化学", "思想政治"): 0.2, ("思想政治", "化学"): 0.2,
    ("化学", "地理"): 0.2, ("地理", "化学"): 0.2,
    ("化学", "音乐或心理"): 0.15, ("音乐或心理", "化学"): 0.15,
    ("化学", "体育"): 0.15, ("体育", "化学"): 0.35,
    ("化学", "信息技术"): 0.15, ("信息技术", "化学"): 0.15,
    ("化学", "通用技术"): 0.15, ("通用技术", "化学"): 0.15,

    ("生物学", "历史"): 0.15, ("历史", "生物学"): 0.15,
    ("生物学", "思想政治"): 0.15, ("思想政治", "生物学"): 0.15,
    ("生物学", "地理"): 0.15, ("地理", "生物学"): 0.15,
    ("生物学", "音乐或心理"): 0.1, ("音乐或心理", "生物学"): 0.1,
    ("生物学", "体育"): 0.1, ("体育", "生物学"): 0.1,
    ("生物学", "信息技术"): 0.1, ("信息技术", "生物学"): 0.1,
    ("生物学", "通用技术"): 0.1, ("通用技术", "生物学"): 0.1,

    ("历史", "思想政治"): 0.2, ("思想政治", "历史"): 0.25,
    ("历史", "地理"): 0.2, ("地理", "历史"): 0.2,
    ("历史", "音乐或心理"): 0.15, ("音乐或心理", "历史"): 0.15,
    ("历史", "体育"): 0.15, ("体育", "历史"): 0.35,
    ("历史", "信息技术"): 0.15, ("信息技术", "历史"): 0.15,
    ("历史", "通用技术"): 0.15, ("通用技术", "历史"): 0.15,

    ("思想政治", "地理"): 0.2, ("地理", "思想政治"): 0.2,
    ("思想政治", "音乐或心理"): 0.1, ("音乐或心理", "思想政治"): 0.15,
    ("思想政治", "体育"): 0.1, ("体育", "思想政治"): 0.25,
    ("思想政治", "信息技术"): 0.1, ("信息技术", "思想政治"): 0.15,
    ("思想政治", "通用技术"): 0.1, ("通用技术", "思想政治"): 0.15,

    ("地理", "音乐或心理"): 0.1, ("音乐或心理", "地理"): 0.15,
    ("地理", "体育"): 0.1, ("体育", "地理"): 0.3,
    ("地理", "信息技术"): 0.1, ("信息技术", "地理"): 0.15,
    ("地理", "通用技术"): 0.1, ("通用技术", "地理"): 0.15,

    ("音乐或心理", "体育"): 0.15, ("体育", "音乐或心理"): 0.25,
    ("音乐或心理", "信息技术"): 0.15, ("信息技术", "音乐或心理"): 0.15,
    ("音乐或心理", "通用技术"): 0.15, ("通用技术", "音乐或心理"): 0.15,

    ("体育", "信息技术"): 0.5, ("信息技术", "体育"): 0.15,
    ("体育", "通用技术"): 0.35, ("通用技术", "体育"): 0.15,

    ("信息技术", "通用技术"): 0.15, ("通用技术", "信息技术"): 0.15
}

# 创建模型
model = cp_model.CpModel()

# 定义变量
x = {}  # x[(c, d, t, s)] 表示班级 c 在天 d 的时间段 t 是否安排科目 s
w = {}  # w[(c, d, t, s1, s2)] 表示科目 s1 后接科目 s2 是否会触发疲劳惩罚

# 添加变量
for c in 班级:
    for d in 天:
        for t in 时间段:
            for s in 科目:
                x[(c, d, t, s)] = model.NewBoolVar(f"x_{c}_{d}_{t}_{s}")

# 添加每个班级每周的每个科目的课时数必须与提供的每周课时数一致约束
for c in 班级:
    for s in 科目:
        model.Add(sum(x[(c, d, t, s)] for d in 天 for t in 时间段) == 每周课时数[s])

# 添加总课时约束
for c in 班级:
    for s in 科目:
        model.Add(sum(x[(c, d, t, s)] for d in 天 for t in 时间段) == 每周课时数[s])

# 添加时间冲突约束
for c in 班级:
    for d in 天:
        for t in 时间段:
            model.Add(sum(x[(c, d, t, s)] for s in 科目) <= 1)  # 每个班级在每个时间段只能安排一个科目

# 两个班级之间的冲突
for c1 in 班级:
    for c2 in 班级:
        if c1 != c2:
            for d in 天:
                for t in 时间段:
                    for s in 科目:
                        model.Add(x[(c1, d, t, s)] + x[(c2, d, t, s)] <= 1)

# 添加周一第1节课空出约束
for c in 班级:
    for s in 科目:
        model.Add(x[(c, 1, 1, s)] == 0)

# 添加体育课位置优化约束
for c in 班级:
    for d in 天:
        model.Add(sum(x[(c, d, 8, "体育")] for d in 天) >= sum(x[(c, d, t, "体育")] for d in 天 for t in 时间段 if t != 8))

# 添加每天至少有一节语文、一节数学、一节外语的约束
for c in 班级:
    for d in 天:
        model.Add(sum(x[(c, d, t, "语文")] for t in 时间段) >= 1)
        model.Add(sum(x[(c, d, t, "数学")] for t in 时间段) >= 1)
        model.Add(sum(x[(c, d, t, "外语")] for t in 时间段) >= 1)

# 添加科目不能连续超过两节的约束
允许连堂科目 = ["语文", "数学", "外语"]
for c in 班级:
    for d in 天:
        for s in 科目:
            if s in 允许连堂科目:
                for t in 时间段[:-2]:  # 最后两个时间段没有 t+2
                    model.Add(sum(x[(c, d, t+i, s)] for i in range(3)) <= 2)
            else:
                for t in 时间段[:-1]:  # 最后一个时间段没有 t+1
                    model.Add(x[(c, d, t, s)] + x[(c, d, t+1, s)] <= 1)

# 添加每天除了语文、数学、外语之外，其他学科每天只能上一节课
限制学科 = ["物理", "化学", "生物学", "历史", "思想政治", "地理", "音乐或心理", "体育", "信息技术", "通用技术"]
for c in 班级:
    for d in 天:
        for s in 限制学科:
            model.Add(sum(x[(c, d, t, s)] for t in 时间段) <= 1)  # 每个班级每天只能安排该科目一节课


# 添加相邻课程的疲劳值增长惩罚
for c in 班级:
    for d in 天:
        for t in 时间段[:-1]:  # 最后一个时间段没有 t+1
            for s1 in 科目:
                for s2 in 科目:
                    if (s1, s2) in 疲劳值增长:
                        w[(c, d, t, s1, s2)] = model.NewBoolVar(f"w_{c}_{d}_{t}_{s1}_{s2}")
                        model.AddBoolOr([x[(c, d, t, s1)].Not(), x[(c, d, t+1, s2)].Not(), w[(c, d, t, s1, s2)]])

# 定义目标函数
目标函数 = sum(疲劳值[s] * x[(c, d, t, s)] for c in 班级 for d in 天 for t in 时间段 for s in 科目)

# 添加疲劳值增长惩罚
for c in 班级:
    for d in 天:
        for t in 时间段[:-1]:  # 最后一个时间段没有 t+1
            for s1 in 科目:
                for s2 in 科目:
                    if (s1, s2) in 疲劳值增长:
                        目标函数 += 疲劳值增长[(s1, s2)] * 疲劳值[s2] * w[(c, d, t, s1, s2)]

# 最小化两个班级的平均疲劳值
model.Minimize(目标函数)

# 求解
solver = cp_model.CpSolver()
solver.parameters.max_time_in_seconds = 60  # 设置最大求解时间为60秒
status = solver.Solve(model)

if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
    print("找到可行解！")
    # 保存结果到文件
    with open("课表安排.txt", "w", encoding="utf-8") as file:
        # 计算每个班级的总疲劳度
        疲劳度总和 = {c: 0 for c in 班级}
        
        for c in 班级:
            file.write(f"班级 {c} 的课表安排：\n")
            for d in 天:
                file.write(f"  天 {d}:\n")
                for t in 时间段:
                    for s in 科目:
                        if solver.Value(x[(c, d, t, s)]) == 1:
                            file.write(f"    时间段 {t}: {s}\n")
                            疲劳度总和[c] += 疲劳值[s]
                            if t < len(时间段) - 1:
                                for s2 in 科目:
                                    if solver.Value(x[(c, d, t+1, s2)]) == 1 and (s, s2) in 疲劳值增长:
                                        疲劳度总和[c] += 疲劳值增长[(s, s2)] * 疲劳值[s]
            file.write("\n")
        
        # 输出每个班级的总疲劳度
        for c in 班级:
            file.write(f"班级 {c} 的总疲劳度: {疲劳度总和[c]}\n")
        
        # 输出两个班级的平均疲劳度
        平均疲劳度 = sum(疲劳度总和.values()) / len(班级)
        file.write(f"两个班级的平均疲劳度: {平均疲劳度}\n")
        
    print("课表及疲劳度已保存到文件 '课表安排.txt'。")
else:
    print("未找到可行解。")
